{
  "version": "1.1",
  "generated_at": "2025-01-27T00:00:00Z",
  "register": {
    "path": "pacer.csv",
    "csv": {
      "encoding": "utf-8",
      "delimiter": ",",
      "quotechar": "\"",
      "rfc4180": true,
      "normalize_line_endings": "LF",
      "header_required": true,
      "preserve_unknown_columns": true
    },
    "id": {
      "prefix": "PAC",
      "digits_min": 3,
      "digits_max": 4,
      "pattern": "^PAC-\\d{3,4}$",
      "immutable": true
    }
  },
  "lifecycle": {
    "status_fsm": {
      "TODO": [
        "DOING"
      ],
      "DOING": [
        "REVIEW",
        "TODO"
      ],
      "REVIEW": [
        "DONE",
        "DOING"
      ],
      "DONE": []
    },
    "timestamps": {
      "on_enter_DOING": "set StartedAt if empty (UTC ISO8601)",
      "on_enter_DONE": "set DoneAt (UTC ISO8601)"
    },
    "dependency_gate": "DONE iff all hard BlockedBy DONE (soft dependencies do not block)"
  },
  "concurrency": {
    "write_strategy": "atomic_replace",
    "temp_suffix": ".tmp",
    "lockfile": "pacer.csv.lock",
    "policy": "acquire_lock_or_retry",
    "conflict_detection": "sha256_of_normalized_csv",
    "on_conflict": "reload_merge_preserving_unknown_columns"
  },
  "validation": {
    "blockedby_references": {
      "enabled": true,
      "rule": "all BlockedBy IDs must exist in register",
      "error_code": "E_MISSING_REFERENCE"
    },
    "circular_dependencies": {
      "enabled": true,
      "rule": "dependency graph must be acyclic",
      "error_code": "E_CIRCULAR_DEPENDENCY"
    },
    "content_integrity": {
      "enabled": true,
      "hash_algorithm": "sha256",
      "rule": "content hash must match expected value",
      "error_code": "E_INTEGRITY_FAILURE"
    },
    "line_endings": {
      "enabled": true,
      "rule": "must use LF line endings (Unix-style)",
      "error_code": "E_INVALID_LINE_ENDINGS"
    },
    "empty_rows": {
      "enabled": true,
      "rule": "no empty rows allowed",
      "error_code": "E_EMPTY_ROWS"
    },
    "bom_detection": {
      "enabled": true,
      "rule": "UTF-8 BOM not allowed",
      "error_code": "E_BOM_PRESENT"
    },
    "duplicate_ids": {
      "enabled": true,
      "rule": "no duplicate ID values allowed",
      "error_code": "E_DUPLICATE_ID"
    },
    "quote_escaping": {
      "enabled": true,
      "rule": "quotes must be properly escaped per RFC 4180",
      "error_code": "E_MALFORMED_QUOTES"
    },
    "field_length_limits": {
      "enabled": true,
      "rule": "fields must not exceed 1000 characters",
      "error_code": "E_FIELD_TOO_LONG"
    },
    "timestamp_format": {
      "enabled": true,
      "rule": "timestamps must be valid ISO 8601 format",
      "error_code": "E_INVALID_TIMESTAMP"
    },
    "trailing_commas": {
      "enabled": true,
      "rule": "no trailing commas allowed",
      "error_code": "E_TRAILING_COMMA"
    },
    "required_fields": {
      "enabled": true,
      "rule": "all required fields must be present and non-empty",
      "error_code": "E_MISSING_REQUIRED_FIELD"
    },
    "priority_urgency": {
      "enabled": true,
      "rule": "Priority and Urgency must be valid enum values if present",
      "error_code": "E_INVALID_PRIORITY_URGENCY"
    },
    "validation_rules": {
      "enabled": true,
      "rule": "ValidationRules must be comma-separated list of valid rules",
      "error_code": "E_INVALID_VALIDATION_RULES"
    },
    "enhanced_dependencies": {
      "enabled": true,
      "rule": "BlockedBy may contain hard:soft:weight syntax for enhanced dependencies",
      "error_code": "E_INVALID_DEPENDENCY_SYNTAX"
    },
    "ai_context_fields": {
      "enabled": true,
      "rule": "Context, PreviousAttempts, RelatedWork, LearningNotes must be valid if present",
      "error_code": "E_INVALID_AI_CONTEXT"
    },
    "ai_dependency_intelligence": {
      "enabled": true,
      "rule": "DependencyType must be hard/soft/optional if present",
      "error_code": "E_INVALID_DEPENDENCY_TYPE"
    },
    "ai_instruction_clarity": {
      "enabled": true,
      "rule": "Instructions, ExpectedOutput, ValidationCriteria, ErrorHandling must be coherent if present",
      "error_code": "E_INVALID_AI_INSTRUCTIONS"
    }
  },
  "refusals": {
    "messages": {
      "blocked": "REFUSAL: Blocked by {ids}",
      "fsm": "REFUSAL: Illegal transition {from}->{to}",
      "not_found": "REFUSAL: Unknown ID {id}",
      "bad_id": "REFUSAL: Bad ID format {text}",
      "schema": "REFUSAL: Register validation failed ({why})",
      "missing_reference": "REFUSAL: BlockedBy references non-existent PAC {id}",
      "circular_dependency": "REFUSAL: Circular dependency detected in {cycle}",
      "integrity_failure": "REFUSAL: Content integrity check failed",
      "invalid_line_endings": "REFUSAL: File must use LF line endings (Unix-style)",
      "empty_rows": "REFUSAL: Empty rows not allowed in register",
      "bom_present": "REFUSAL: UTF-8 BOM not allowed in register",
      "duplicate_id": "REFUSAL: Duplicate ID {id} found in register",
      "malformed_quotes": "REFUSAL: Quotes not properly escaped per RFC 4180",
      "field_too_long": "REFUSAL: Field exceeds 1000 character limit",
      "invalid_timestamp": "REFUSAL: Invalid ISO 8601 timestamp format",
      "trailing_comma": "REFUSAL: Trailing commas not allowed",
      "missing_required_field": "REFUSAL: Required field {field} missing or empty",
      "invalid_priority_urgency": "REFUSAL: Invalid Priority or Urgency value",
      "invalid_validation_rules": "REFUSAL: Invalid ValidationRules syntax",
      "invalid_dependency_syntax": "REFUSAL: Invalid dependency syntax in BlockedBy",
      "invalid_ai_context": "REFUSAL: Invalid AI context fields",
      "invalid_dependency_type": "REFUSAL: Invalid DependencyType value",
      "invalid_ai_instructions": "REFUSAL: Invalid AI instruction fields"
    },
    "codes": {
      "blocked": "E_BLOCKED",
      "fsm": "E_FSM",
      "not_found": "E_NOT_FOUND",
      "bad_id": "E_BAD_ID",
      "schema": "E_SCHEMA",
      "missing_reference": "E_MISSING_REFERENCE",
      "circular_dependency": "E_CIRCULAR_DEPENDENCY",
      "integrity_failure": "E_INTEGRITY_FAILURE",
      "invalid_line_endings": "E_INVALID_LINE_ENDINGS",
      "empty_rows": "E_EMPTY_ROWS",
      "bom_present": "E_BOM_PRESENT",
      "duplicate_id": "E_DUPLICATE_ID",
      "malformed_quotes": "E_MALFORMED_QUOTES",
      "field_too_long": "E_FIELD_TOO_LONG",
      "invalid_timestamp": "E_INVALID_TIMESTAMP",
      "trailing_comma": "E_TRAILING_COMMA",
      "missing_required_field": "E_MISSING_REQUIRED_FIELD",
      "invalid_priority_urgency": "E_INVALID_PRIORITY_URGENCY",
      "invalid_validation_rules": "E_INVALID_VALIDATION_RULES",
      "invalid_dependency_syntax": "E_INVALID_DEPENDENCY_SYNTAX",
      "invalid_ai_context": "E_INVALID_AI_CONTEXT",
      "invalid_dependency_type": "E_INVALID_DEPENDENCY_TYPE",
      "invalid_ai_instructions": "E_INVALID_AI_INSTRUCTIONS"
    }
  },
  "notes": {
    "format": "[{iso_utc}] {actor}: {message}",
    "actor_default": "agent@ide",
    "prepend_newest": true,
    "max_entry_chars": 280
  },
  "wip": {
    "limit_hint": 3
  },
  "normalization": {
    "trim_fields": [
      "Title",
      "DoD",
      "Assignee",
      "BlockedBy",
      "Notes"
    ],
    "collapse_spaces": [
      "Title"
    ],
    "uppercase_ids": true,
    "strip_blockedby_spaces": true
  },
  "parsing": {
    "grammar_file": "pacer.agent.grammar.ebnf",
    "id_prefix_var": "{ID_PREFIX}",
    "case_insensitive_keywords": true,
    "allow_slash_wrapped_ids": true
  }
}